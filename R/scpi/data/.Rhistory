Y.sc     = Y.fit.na,
lb       = c(sc.l.na), ub = c(sc.r.na),
sname    = "SC Unit")
# Set ticks, event label and merge
x.ticks <- c(seq(plot.range[1], plot.range[length(plot.range)], length.out = 5), T0)
x.ticks <- round(unique(x.ticks))
event.lab <- paste("\n", "Reunification", sep = "")
event.lab.height <- 10
dat.plot    <- subset(dat,    t %in% plot.range)
dat.sc.plot <- subset(dat.sc, t %in% plot.range)
plotdf <- dplyr::left_join(dat.plot, dat.sc.plot, by = 't')
## Plot specs
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
labs(x = "Year", y = "GDP per capita (thousand US dollars)") +
theme(legend.position = "bottom", legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
## Add Series to plot
plot <- plot +
geom_line( data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), linetype = 'solid') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), shape = 1) +
geom_line( data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), linetype = 'dashed') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), shape = 19) +
geom_vline(xintercept = T0, linetype = "dashed") +
geom_text(aes(x = T0, label = event.lab, y = event.lab.height), angle = 90, size = 4) +
scale_x_continuous(breaks = x.ticks) +
scale_color_manual(name = "", values = c("grey46", "mediumblue"),
labels = c("Synthetic Control", "Treated"),
guide = guide_legend(override.aes = list(
linetype = c('dashed','solid'), shape = c(19, 1))))
plot
plot + geom_errorbar(data = plotdf,
aes(x = .data$t, ymin = .data$lb, ymax = .data$ub, colour = .data$sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
## Plot specs
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
labs(x = "Year", y = "GDP per capita (thousand US dollars)") +
theme(legend.position = "bottom", legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
## Add Series to plot
plot <- plot +
geom_line( data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), linetype = 'solid') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), shape = 1) +
geom_line( data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), linetype = 'dashed') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), shape = 19) +
geom_vline(xintercept = T0, linetype = "dashed") +
geom_text(aes(x = T0, label = event.lab, y = event.lab.height), angle = 90, size = 4) +
scale_x_continuous(breaks = x.ticks) +
scale_color_manual(name = "", values = c("mediumblue", "grey46"),
labels = c("Synthetic Control", "Treated"),
guide = guide_legend(override.aes = list(
linetype = c('dashed','solid'), shape = c(19, 1))))
## Add confidence bars and plot
plot + geom_errorbar(data = plotdf,
aes(x = .data$t, ymin = .data$lb, ymax = .data$ub, colour = .data$sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
col.treated = "grey46"
col.synth ="mediumblue"
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
labs(x = "Year", y = "GDP per capita (thousand US dollars)") +
theme(legend.position = "bottom", legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
## Add Series to plot
plot <- plot +
geom_line( data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), linetype = 'solid') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), shape = 1) +
geom_line( data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), linetype = 'dashed') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), shape = 19) +
geom_vline(xintercept = T0, linetype = "dashed") +
geom_text(aes(x = T0, label = event.lab, y = event.lab.height), angle = 90, size = 4) +
scale_x_continuous(breaks = x.ticks) +
scale_color_manual(name = "", values = c(col.synth, col.treated),
labels = c("Synthetic Control", "Treated"),
guide = guide_legend(override.aes = list(
linetype = c('dashed','solid'), shape = c(19, 1))))
## Add confidence bars and plot
plot + geom_errorbar(data = plotdf,
aes(x = .data$t, ymin = .data$lb, ymax = .data$ub, colour = .data$sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
plot + geom_errorbar(data = plotdf,
aes(x = .data$t, ymin = .data$lb, ymax = .data$ub, colour = .data$sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
library(scpi)
library(ggplot2)
### Load data
data <- scpi_germany
####################################
### Set options for data preparation
id.var      <- "country"                             # ID variable
time.var    <- "year"                                # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)   # Pre-treatment period
period.post <- (1991:1997)                           # Post-treatment period
unit.tr     <- "West Germany"                        # Treated unit (in terms of id.var)
unit.co     <- unique(data$country)[-7]              # Donors pool
outcome.var <- "gdp"                                 # Outcome variable
cov.adj     <- NULL                                  # Covariates for adjustment
features    <- c("gdp")                              # No features other than outcome
constant    <- T                                     # No constant term
report.missing <- F                                  # To check where missing values are
cointegrated.data <- T                               # Belief that the data are cointegrated
####################################
### Data preparation
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant,  report.missing = report.missing, cointegrated.data = cointegrated.data)
####################################
## Set options for inference
u.alpha  <- 0.05                         # Confidence level (in-sample uncertainty)
e.alpha  <- 0.05                         # Confidence level (out-of-sample uncertainty)
rho      <- NULL                         # Regularization parameter (if NULL it is estimated)
rho.max  <- 1                            # Maximum value attainable by rho
sims     <- 200                          # Number of simulations
V        <- NULL                         # Weighting matrix (if NULL it is the identity matrix)
u.order  <- 1                            # Degree of polynomial in B and C when modelling u
u.lags   <- 1                            # Lags of B to be used when modelling u
u.sigma  <- "HC1"                        # Estimator for the variance-covariance of u
u.missp  <- T                            # If TRUE then the model is treated as misspecified
e.lags   <- 1                            # Degree of polynomial in B and C when modelling e
e.order  <- 1                            # Lags of B to be used when modelling e
e.method <- "gaussian"                   # Estimation method for out-of-sample uncertainty
cores    <- 2                            # Number of cores to be used by scpi
w.constr <- list(name = "simplex")       # Simplex-type constraint set
set.seed(8894)
result  <- scpi(data = df,u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags,
e.method = e.method, cores = cores, w.constr = w.constr, u.alpha = u.alpha,
e.alpha = e.alpha, V = V, rho = rho, rho.max = rho.max)
####################################
### SC - plot results
scplot(result = result, fig.path = ".",
fig.name = "germany_unc", fig.format = "png", plot.range = (1961:1997),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
x.ticks = NULL, e.out = T, event.label = list(lab = "Reunification", height = 10))
####################################
### SC - manually reproduce plot
e.method <- result$inference.results$e.method
# Store data on treated unit, synthetic unit, and prediction bars
y.fit <- rbind(result$est.results$Y.pre.fit, result$est.results$Y.post.fit)
y.act <- rbind(result$data$Y.pre, result$data$Y.post)
sc.l  <- result$inference.results$CI.all.gaussian[, 1, drop = F]
sc.r  <- result$inference.results$CI.all.gaussian[, 2, drop = F]
# Store other specifics
period.pre  <- result$data$specs$period.pre
period.post <- result$data$specs$period.post
T0          <- period.pre[length(period.pre)] # intercept
plot.range  <- c(period.pre, period.post)
# Actual data
dat    <- data.frame(t     = c(period.pre, period.post),
Y.act = c(y.act),
sname = "Treated")
# Fill with NAs Y.fit and confidence bounds where missing
Y.fit.na  <- matrix(NA, nrow = length(c(period.pre, period.post)))
sc.l.na   <- matrix(NA, nrow = length(c(period.pre, period.post)))
sc.r.na   <- matrix(NA, nrow = length(c(period.pre, period.post)))
not.missing.plot <- c(period.pre,period.post) %in% rownames(y.fit)
not.missing.ci   <- c(period.pre,period.post) %in% rownames(sc.l)
Y.fit.na[not.missing.plot, 1] <- y.fit
sc.l.na[not.missing.ci, 1]    <- sc.l
sc.r.na[not.missing.ci, 1]    <- sc.r
# Synthetic unit data
dat.sc <- data.frame(t        = c(period.pre, period.post),
Y.sc     = Y.fit.na,
lb       = c(sc.l.na), ub = c(sc.r.na),
sname    = "SC Unit")
# Set ticks, event label and merge
x.ticks <- c(seq(plot.range[1], plot.range[length(plot.range)], length.out = 5), T0)
x.ticks <- round(unique(x.ticks))
event.lab <- paste("\n", "Reunification", sep = "")
event.lab.height <- 10
dat.plot    <- subset(dat,    t %in% plot.range)
dat.sc.plot <- subset(dat.sc, t %in% plot.range)
plotdf <- dplyr::left_join(dat.plot, dat.sc.plot, by = 't')
## Plot specs
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
labs(x = "Year", y = "GDP per capita (thousand US dollars)") +
theme(legend.position = "bottom", legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
## Add Series to plot
plot <- plot +
geom_line( data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), linetype = 'solid') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.act, colour = .data$sname.x), shape = 1) +
geom_line( data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), linetype = 'dashed') +
geom_point(data = plotdf, aes(x = t, y = .data$Y.sc,  colour = .data$sname.y), shape = 19) +
geom_vline(xintercept = T0, linetype = "dashed") +
geom_text(aes(x = T0, label = event.lab, y = event.lab.height), angle = 90, size = 4) +
scale_x_continuous(breaks = x.ticks) +
scale_color_manual(name = "", values = c("mediumblue", "grey46"),
labels = c("Synthetic Control", "Treated"),
guide = guide_legend(override.aes = list(
linetype = c('dashed','solid'), shape = c(19, 1))))
## Add confidence bars and plot
plot + geom_errorbar(data = plotdf,
aes(x = .data$t, ymin = .data$lb, ymax = .data$ub, colour = .data$sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
library(scpi)
### Load data
data <- scpi_germany
####################################
### Set options for data preparation
id.var      <- "country"                             # ID variable
time.var    <- "year"                                # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)   # Pre-treatment period
period.post <- (1991:1997)                           # Post-treatment period
unit.tr     <- "West Germany"                        # Treated unit (in terms of id.var)
unit.co     <- unique(data$country)[-7]              # Donors pool
outcome.var <- "gdp"                                 # Outcome variable
cov.adj     <- NULL                                  # Covariates for adjustment
features    <- NULL                                  # No features other than outcome
constant    <- T                                     # No constant term
report.missing <- F                                  # To check where missing values are
cointegrated.data <- T                               # Belief that the data are cointegrated
####################################
### Data preparation
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant,  report.missing = report.missing, cointegrated.data = cointegrated.data)
####################################
### SC - point estimation with simplex
est.si  <- scest(data = df, w.constr = list(name="simplex"))
# Use print or summary methods to check results
print(est.si)
summary(est.si)
####################################
### SC - plot results
scplot(result = est.si, fig.path = ".",
fig.name = "germany_est", fig.format = "png", plot.range = (1961:1997),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
event.label = list(lab = "Reunification", height = 10))
####################################
### SC - point estimation with lasso
est.lasso <- scest(data = df, w.constr = list(name="lasso"))
summary(est.lasso)
est.lasso2 <- scest(data = df, w.constr = list(p = "L1", dir = "<=", Q = 1))
summary(est.lasso2)
####################################
### SC - point estimation with ridge
est.ridge <- scest(data = df, w.constr = list(name="ridge"))
summary(est.ridge)
Qest <- est.ridge$est.results$w.constr$Q
est.ridge2 <- scest(data = df, w.constr = list(p = "L2", dir = "<=", Q = Qest))
summary(est.ridge2)
####################################
### SC - point estimation with least squares
est.ls <- scest(data = df, w.constr = list(name="ols"))
summary(est.ls)
est.ls2 <- scest(data = df, w.constr = list(p = "no norm", dir = NULL, Q = NULL))
summary(est.ls2)
####################################
## Set options for inference
u.alpha  <- 0.05                         # Confidence level (in-sample uncertainty)
e.alpha  <- 0.05                         # Confidence level (out-of-sample uncertainty)
rho      <- NULL                         # Regularization parameter (if NULL it is estimated)
rho.max  <- 1                            # Maximum value attainable by rho
sims     <- 200                          # Number of simulations
V        <- NULL                         # Weighting matrix (if NULL it is the identity matrix)
u.order  <- 1                            # Degree of polynomial in B and C when modelling u
u.lags   <- 1                            # Lags of B to be used when modelling u
u.sigma  <- "HC1"                        # Estimator for the variance-covariance of u
u.missp  <- T                            # If TRUE then the model is treated as misspecified
e.lags   <- 1                            # Degree of polynomial in B and C when modelling e
e.order  <- 1                            # Lags of B to be used when modelling e
e.method <- "all"                        # Estimation method for out-of-sample uncertainty
cores    <- 1                            # Number of cores to be used by scpi
w.constr <- list(name = "simplex")       # Simplex-type constraint set
set.seed(8894)
pi.si   <- scpi(data = df,u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags,
e.method = e.method, cores = cores, w.constr = w.constr, u.alpha = u.alpha,
e.alpha = e.alpha, V = V, rho = rho, rho.max = rho.max)
# Use print or summary methods to check results
print(pi.si)
summary(pi.si)
####################################
### SC - plot results
scplot(result = pi.si, fig.path = ".",
fig.name = "germany_unc", fig.format = "png", plot.range = (1961:1997),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
x.ticks = NULL, e.out = T, event.label = list(lab = "Reunification", height = 10))
################################################################################
### Other examples of data preparation
## multiple features
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = c("gdp", "infrate"),
constant = constant,  report.missing = report.missing, cointegrated.data = cointegrated.data)
## multiple features and featuer-specific covariate adjustment
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, features = c("gdp", "infrate"),
cov.adj = list('gdp' = c("constant","trend"), 'infrate' = c("constant")),
constant = constant,  report.missing = report.missing,
cointegrated.data = cointegrated.data)
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
data <- load('scpi_germany.RData')
## Set parameters for data preparation
id.var      <- "country"                             # ID variable
time.var    <- "year"                                # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)   # Pre-treatment period
period.post <- (1991:1997)                           # Post-treatment period
unit.tr     <- "West Germany"                        # Treated unit (in terms of id.var)
unit.co     <- unique(data$country)[-7]              # Donors pool
outcome.var <- "gdp"                                 # Outcome variable
cov.adj     <- NULL                                  # Covariates for adjustment
features    <- NULL                                  # No features other than outcome
constant    <- T                                     # No constant term
report.missing <- F                                  # To check where missing values are
cointegrated.data <- T                               # Belief that the data are cointegrated
cov.adj <- features <- NULL
load('scpi_germany.RData')
data <-scpi_germany
## Set parameters for data preparation
id.var      <- "country"                             # ID variable
time.var    <- "year"                                # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)   # Pre-treatment period
period.post <- (1991:1997)                           # Post-treatment period
unit.tr     <- "West Germany"                        # Treated unit (in terms of id.var)
unit.co     <- unique(data$country)[-7]              # Donors pool
outcome.var <- "gdp"                                 # Outcome variable
cov.adj     <- NULL                                  # Covariates for adjustment
features    <- NULL                                  # No features other than outcome
constant    <- T                                     # No constant term
report.missing <- F                                  # To check where missing values are
cointegrated.data <- T                               # Belief that the data are cointegrated
cov.adj <- features <- NULL
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant,  report.missing = T, cointegrated.data = cointegrated.data)
set.seed(8894)
res.est <- scest(data = df, plot = F, plot.name = "germany_est",  w.constr = list(name = "ridge", Q = 1))
# Use print and summary methods to check results
print(res.est)
summary(res.est)
res.est <- scest(data = df, plot = F, plot.name = "germany_est",  w.constr = list(name = "simplex", Q = 1))
# Use print and summary methods to check results
print(res.est)
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
cores = 1
res.pi  <- scpi(data = df, sims = 10, e.method = e.method, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0, u.sigma = u.sigma, u.missp = u.missp,
cores = 1, e.lags = 0, e.order = 1)
res.pi  <- scpi(data = df, sims = 10, e.method = e.method, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
library(ggplot2)
library(optiSolve)
library(Qtools)
library(latex2exp)
library(Hmisc)
library(abind)
library(Matrix)
library(magic)
library(nloptr)
library(magic)
library(dplyr)
library(tidyr)
library(doSNOW)
library(doRNG)
library(parallel)
library(CVXR)
res.pi  <- scpi(data = df, sims = 10, e.method = e.method, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
G<-c(0.05403223, 0.0651157 , 0.06175113, 0.05983493, 0.06119507,
0.0387953 , 0.06044058, 0.06328771, 0.06281594, 0.04371938,
0.06052556, 0.03648834, 0.04511973, 0.07559281, 0.05461891,
0.07607182, 0.00178036)
res.lb <-   nloptr(x0          = rep(0,(J+KM)),
eval_f      = obj.fun.min,
lb          = c(rep(lb,J), rep(-Inf,KM)),
ub          = c(rep(Inf,J), rep(Inf,KM)),
eval_g_eq   = norm.equal,
eval_g_ineq = single.ineq,
opts        = opt.list,
xt = xt, beta = beta, Q = Q, G = G, J = J, KM = KM, QQ = QQ, p.int = p.int)
alert <- res.lb$status < 0 | res.lb$status >= 5
flag  <- checkConstraints(res.lb, dire, 1.0e-2, 1.0e-2)  # allow for a little bit of slackness
res.lb$objective
res.lb$solution
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
res.pi  <- scpi(data = df, sims = 10, e.method = e.method, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
print(res.pi)
res.pi  <- scpi(data = df, sims = 400, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
print(res.pi)
scplot(res.pi)
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
res.pi  <- scpi(data = df, sims = 400, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
sum(G)
sum(Sigma.root)
sum(u.mean)
sum(res.na)
res_na
res.na
res
sum(A)
sc.pred$est.results$w
print(sc.pred$est.results$w)
sum(B)
sum(sc.pred$est.results$w)
sum(Q)
res.pi  <- scpi(data = df, sims = 400, w.constr = list(name = "simplex" , Q = 1),
u.order = 1, u.lags = 0,cores = 1, e.lags = 0, e.order = 1)
View(Q)
sum(Sigma.root)
View(Sigma.root)
res
res.na
res.est <- scest(data = df, plot = F, plot.name = "germany_est",  w.constr = list(name = "simplex", Q = 1))
print(res.est)
res.est$est.results$res
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
res.est <- scest(data = df, plot = F, plot.name = "germany_est",  w.constr = list(name = "simplex", Q = 1))
b
res$solution
res$objective
opt.list$xtol_rel <- 1.0e-16
opt.list$xtol_abs <- 1.0e-16
opt.list$ftol_rel <- 1.0e-16
opt.list$ftol_abs <- 1.0e-16
res <-   nloptr::nloptr(x0          = rep(0, (J+KM)),
eval_f      = obj.fun.est,
lb          = c(rep(lb,J), rep(-Inf,KM)),
ub          = c(rep(Inf,J), rep(Inf,KM)),
eval_g_eq   = norm.co.est,
opts        = opt.list,
Z = Z, V = V, A = A, J = J, QQ = QQ, KM = KM, p = pp)
res$solution
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
#########################################################################################
## Two features, feature-specific covariate adjustment, cointegrated data
setwd("D:\\Dropbox (Personal)\\Research\\Cattaneo\\packages\\R\\scpi\\data")
res.est <- scest(data = df, plot = F, plot.name = "germany_est",  w.constr = list(name = "simplex", Q = 1))
res.est$est.results$res
cbind(df$B,df$C)%*%res.est$est.results$b
