tv_value <- tv_distance_log_normal_pareto(mu_ln = 0, sigma_ln = 1, alpha = 0.89)
cat("The TV distance between the log-normal and Pareto (Lomax) distributions is:", tv_value, "\n")
# Load necessary library
library(ggplot2)
# Set seed for reproducibility
set.seed(123)
# Generate data for a standard normal distribution
normal_data <- rnorm(1000, mean = 0, sd = 1)
# Generate data for a normal distribution with extra outliers on the right tail:
# Here 950 points are from a standard normal and 50 extra points come from a shifted distribution.
normal_with_outliers <- c(rnorm(950, mean = 0, sd = 1),
rnorm(50, mean = 4, sd = 1))
# Combine the two datasets into one data frame with a grouping variable
data <- data.frame(
x = c(normal_data, normal_with_outliers),
distribution = factor(rep(c("Normal", "Normal with Outliers"), each = 1000))
)
# Create the density plot using ggplot2
ggplot(data, aes(x = x, color = distribution)) +
geom_density(size = 1.2) +      # Plot the densities with a slightly thicker line
labs(
title = "Density Plot: Normal vs. Normal with Outliers",
x = "Value",
y = "Density",
color = "Distribution"
) +
theme_minimal()
# Generate a sequence of x values
x <- seq(-10, 10, length.out = 1000)
# Density of the standard normal distribution
density_normal <- dnorm(x, mean = 0, sd = 1)
# Density of the mixture of two normals:
# 50% from a normal with mean -2, sd = 1
# 50% from a normal with mean 2, sd = 1
density_mixture <- 0.5 * dnorm(x, mean = -2, sd = 1) +
0.5 * dnorm(x, mean = 2, sd = 1)
# Plot the standard normal density
plot(x, density_normal,
type = "l",
lty = 1,
lwd = 2,
col = "blue",
xlab = "x",
ylab = "Density",
main = "Normal Density vs Mixture of Two Normals")
# Add the mixture density to the same plot
lines(x, density_mixture,
lty = 2,
lwd = 2,
col = "red")
# Add a legend to distinguish the lines
legend("topright",
legend = c("Standard Normal", "Mixture of Two Normals"),
col = c("blue", "red"),
lty = c(1, 2),
lwd = 2)
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the ggplot, setting the x-range from -10 to 10
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
# Plot the density of the standard normal distribution
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
aes(color = "Standard Normal"),
size = 1.2) +
# Plot the density of the mixture of two normals
stat_function(fun = mixture_density,
aes(color = "Mixture of Two Normals"),
linetype = "dashed",
size = 1.2) +
# Add titles and axis labels
labs(title = "Density Plot: Standard Normal vs Mixture of Two Normals",
x = "x",
y = "Density",
color = "Distribution") +
# Manually define colors for the legend
scale_color_manual(values = c("Standard Normal" = "blue",
"Mixture of Two Normals" = "red")) +
# Use a minimal theme for a cleaner look
theme_minimal()
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the plot
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
# Fill area for the standard normal using a default fill color with alpha
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density using a default fill color with alpha
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Overlay black solid line for the standard normal density
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1.2) +
# Overlay black solid line for the mixture density
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1.2) +
# Add labels and title
labs(title = "Density Plot: Standard Normal vs Mixture of Two Normals",
x = "x",
y = "Density") +
# Use the black-and-white theme and remove the legend
theme_bw() +
theme(legend.position = "none")
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
# Fill area for the standard normal using a default fill color with alpha
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density using a default fill color with alpha
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Overlay black solid line for the standard normal density
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1.2) +
# Overlay black solid line for the mixture density
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1.2) +
# Add labels and title
labs(title = "Density Plot: Standard Normal vs Mixture of Two Normals",
x = "x",
y = "Density") +
# Use the black-and-white theme and remove the legend
theme_minimal() +
theme(legend.position = "none")
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the plot
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the ggplot
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
# Filled area for the standard normal density
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Filled area for the mixture density
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Black line for the standard normal density
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1.2) +
# Black line for the mixture density
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1.2) +
# Apply a black and white theme and remove legend, titles, and axes modifications
theme_bw() +
theme(
legend.position = "none",       # remove legend
plot.title = element_blank(),   # remove title
axis.title = element_blank(),   # remove axis labels
axis.text = element_blank(),    # remove axis tick labels
axis.ticks = element_blank(),   # remove axis ticks
axis.line.y = element_blank()   # remove the y axis line
)
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the ggplot
ggplot(data.frame(x = c(-10, 10)), aes(x)) +
# Fill area for the standard normal density
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Black line for the standard normal density (size 1)
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1) +
# Black line for the mixture density (size 1)
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1) +
# Apply a black and white theme and remove unwanted elements
theme_minimal() +
theme(
legend.position = "none",         # remove legend
plot.title = element_blank(),     # remove title
axis.title = element_blank(),     # remove axis labels
axis.text = element_blank(),      # remove axis tick labels
axis.ticks = element_blank(),     # remove axis ticks
axis.line = element_blank(),      # remove the axis lines
panel.grid.major = element_blank(),  # remove major grid lines
panel.grid.minor = element_blank()   # remove minor grid lines
)
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.5 * dnorm(x, mean = -2, sd = 1) + 0.5 * dnorm(x, mean = 2, sd = 1)
}
# Create the ggplot
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
# Fill area for the standard normal density
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Black line for the standard normal density (size 1)
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1) +
# Black line for the mixture density (size 1)
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1) +
# Apply a black and white theme and remove unwanted elements
theme_minimal() +
theme(
legend.position = "none",         # remove legend
plot.title = element_blank(),     # remove title
axis.title = element_blank(),     # remove axis labels
axis.text = element_blank(),      # remove axis tick labels
axis.ticks = element_blank(),     # remove axis ticks
axis.line = element_blank(),      # remove the axis lines
panel.grid.major = element_blank(),  # remove major grid lines
panel.grid.minor = element_blank()   # remove minor grid lines
)
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.95 * dnorm(x, mean = 0, sd = 1) + 0.05 * dnorm(x, mean = 4, sd = 1)
}
# Create the ggplot
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
# Fill area for the standard normal density
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Black line for the standard normal density (size 1)
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1) +
# Black line for the mixture density (size 1)
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1) +
# Apply a black and white theme and remove unwanted elements
theme_minimal() +
theme(
legend.position = "none",         # remove legend
plot.title = element_blank(),     # remove title
axis.title = element_blank(),     # remove axis labels
axis.text = element_blank(),      # remove axis tick labels
axis.ticks = element_blank(),     # remove axis ticks
axis.line = element_blank(),      # remove the axis lines
panel.grid.major = element_blank(),  # remove major grid lines
panel.grid.minor = element_blank()   # remove minor grid lines
)
# Load necessary library
library(ggplot2)
# Define the density function for the mixture of two normals
mixture_density <- function(x) {
0.9 * dnorm(x, mean = 0, sd = 1) + 0.1 * dnorm(x, mean = 4, sd = 1)
}
# Create the ggplot
ggplot(data.frame(x = c(-5, 5)), aes(x)) +
# Fill area for the standard normal density
stat_function(aes(fill = "Standard Normal"),
fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "area",
alpha = 0.3) +
# Fill area for the mixture density
stat_function(aes(fill = "Mixture"),
fun = mixture_density,
geom = "area",
alpha = 0.3) +
# Black line for the standard normal density (size 1)
stat_function(fun = dnorm,
args = list(mean = 0, sd = 1),
geom = "line",
color = "black",
size = 1) +
# Black line for the mixture density (size 1)
stat_function(fun = mixture_density,
geom = "line",
color = "black",
size = 1) +
# Apply a black and white theme and remove unwanted elements
theme_minimal() +
theme(
legend.position = "none",         # remove legend
plot.title = element_blank(),     # remove title
axis.title = element_blank(),     # remove axis labels
axis.text = element_blank(),      # remove axis tick labels
axis.ticks = element_blank(),     # remove axis ticks
axis.line = element_blank(),      # remove the axis lines
panel.grid.major = element_blank(),  # remove major grid lines
panel.grid.minor = element_blank()   # remove minor grid lines
)
library(dplyr)
library(ggplot2)    # for mpg
data("mpg", package = "ggplot2")
# 1) construct a 2×2 DID “panel”
df <- mpg %>%
filter(manufacturer %in% c("audi","volkswagen")) %>%
mutate(
treat = if_else(manufacturer == "audi", 1, 0),
post  = if_else(year         == 2008,      1, 0)
)
# peek at the four cells
df %>%
count(treat, post) %>%
arrange(treat, post)
means <- df %>%
group_by(treat, post) %>%
summarise(mean_hwy = mean(hwy, na.rm = TRUE), .groups = "drop")
mu_t1 <- means %>% filter(treat==1, post==1) %>% pull(mean_hwy)
mu_t0 <- means %>% filter(treat==1, post==0) %>% pull(mean_hwy)
mu_c1 <- means %>% filter(treat==0, post==1) %>% pull(mean_hwy)
mu_c0 <- means %>% filter(treat==0, post==0) %>% pull(mean_hwy)
did_manual <- (mu_t1 - mu_t0) - (mu_c1 - mu_c0)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
data <- df %>%
group_by(treat, post) %>%
summarise(outcome = mean(hwy, na.rm = TRUE), .groups = "drop")
mu_tr_post <- data %>% filter(treat==1, post==1) %>% pull(outcome)
mu_tr_pre <- data %>% filter(treat==1, post==0) %>% pull(outcome)
mu_co_post <- data %>% filter(treat==0, post==1) %>% pull(outcome)
mu_co_pre <- data %>% filter(treat==0, post==0) %>% pull(outcome)
did_manual <- (mu_tr_post - mu_tr_pre) - (mu_co_post - mu_co_pre)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
model <- lm(hwy ~ treat * post, data = df)
summary(model)
# the coefficient β3 on treat:post is the DiD estimate
coef(model)["treat:post"]
model <- feols(hwy ~ treat * post, data = df)
model <- fixest::feols(hwy ~ treat * post, data = df)
summary(model)
model <- fixest::feols(hwy ~ treat * post, data = df)
summary(model)
# the coefficient β3 on treat:post is the DiD estimate
coef(model)["treat:post"]
# MANUAL 2×2 DiD via group means
mu_tr_post <- data %>% filter(treat==1, post==1) %>% pull(outcome)
mu_tr_pre <- data %>% filter(treat==1, post==0) %>% pull(outcome)
mu_co_post <- data %>% filter(treat==0, post==1) %>% pull(outcome)
mu_co_pre <- data %>% filter(treat==0, post==0) %>% pull(outcome)
did_manual <- (mu_tr_post - mu_tr_pre) - (mu_co_post - mu_co_pre)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
# MANUAL 2×2 DiD via group means
mu_tr_post <- data %>% filter(treat==1, post==1) %>% pull(outcome)
mu_tr_pre <- data %>% filter(treat==1, post==0) %>% pull(outcome)
mu_co_post <- data %>% filter(treat==0, post==1) %>% pull(outcome)
mu_co_pre <- data %>% filter(treat==0, post==0) %>% pull(outcome)
did_manual <- (mu_tr_post - mu_tr_pre) - (mu_co_post - mu_co_pre)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
# DiD via linear regression
model <- fixest::feols(hwy ~ treat * post, data = df)
summary(model)
model <- fixest::feols(hwy ~ treat * post, data = df, vcov="hetero")
summary(model)
# MANUAL 2×2 DiD via group means
mu_tr_post <- data %>% filter(treat==1, post==1) %>% pull(outcome)
mu_tr_pre <- data %>% filter(treat==1, post==0) %>% pull(outcome)
mu_co_post <- data %>% filter(treat==0, post==1) %>% pull(outcome)
mu_co_pre <- data %>% filter(treat==0, post==0) %>% pull(outcome)
did_manual <- (mu_tr_post - mu_tr_pre) - (mu_co_post - mu_co_pre)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
# DiD via linear regression
model <- fixest::feols(hwy ~ treat * post, data = df, vcov="hetero")
summary(model)
df$outcome <- df$hwy
# MANUAL 2×2 DiD via group means
mu_tr_post <- data %>% filter(treat==1, post==1) %>% pull(outcome)
mu_tr_pre <- data %>% filter(treat==1, post==0) %>% pull(outcome)
mu_co_post <- data %>% filter(treat==0, post==1) %>% pull(outcome)
mu_co_pre <- data %>% filter(treat==0, post==0) %>% pull(outcome)
did_manual <- (mu_tr_post - mu_tr_pre) - (mu_co_post - mu_co_pre)
cat("Manual 2×2 DiD estimate =", round(did_manual, 3), "\n")
# DiD via linear regression
model <- fixest::feols(outcome ~ treat * post, data = df, vcov="hetero")
summary(model)
data("mtcars")
# 1) Difference in means by group
means <- mtcars %>%
group_by(am) %>%
summarise(
N       = n(),
mean_mpg = mean(mpg),
sd_mpg   = sd(mpg),
.groups  = "drop"
)
print(means)
mtcars$treatment <- mtcars$am
mtcars$outcome <- mtcars$mpg
means <- mtcars %>%
group_by(treatment) %>%
summarise(
N       = n(),
mean_mpg = mean(outcome),
sd_mpg   = sd(outcome),
.groups  = "drop"
)
print(means)
means <- mtcars %>%
group_by(treatment) %>%
summarise(
N       = n(),
mean_outcome = mean(outcome),
.groups  = "drop"
)
print(means)
model <- feols(outcome ~ treatment, data = mtcars, vcov="hetero")
model <- fixest::feols(outcome ~ treatment, data = mtcars, vcov="hetero")
summary(model)
rm(list=ls(all=TRUE))
pacman::p_load(foreign, fixest, ggplot2, MatchIt, Matching, dplyr)
###################################################################
# Question 2: Selection on Observables
###################################################################
ecls <- read.csv("ecls.csv")
#########################################################################################
## Remember to check often that all the packages are updated!
#old.packages()
#update.packages(ask = FALSE)
#########################################################################################
# Some paths
path <- "/Users/fpalomba/Princeton Dropbox/Filippo Palomba/projects/0000_software/working/scpi/"
path.pkg <- paste0(path, "R/scpi/")
name.pkg <- "scpi"
#########################################################################################
remove.packages(name.pkg)
pacman::p_load(devtools, testthat)
#########################################################################################
## Change Version Below!!!
setwd(path.pkg)
# Prepare build ignore
usethis::use_build_ignore(c("tests", ".gitignore"))
#usethis::use_github_action_check_standard()
# Prepare documentation
devtools::document()
# Install and check
devtools::build()
devtools::install(upgrade = "never")
devtools::check(manual = FALSE)
