results <- list()
## theoretical spectrum
results[["Theoretical"]] <- specTheoretical(model=list(ar=rho), freq=seq(0, 0.5, length.out=Nfreqs))
## parametric spectrum estimator
#results[["ParamAR"]] <- periodogramAR(x=Y, n.freq=Nfreqs, method="mle", demean=FALSE)
## simple periodogram estimator
#results[["NPclassic"]] <- periodogram(Y, TT=length(Y), padding=0, symmetric=F)
## simple periodogram estimator (panel version)
results[["NPclassic-Panel"]] <- ppNPclassic(df, id.var=id.var, outcome.var=outcome.var, padding=0, symmetric=F)
## non-parametric spectrum estimator
#results[["NPkernel"]] <- periodogramNPkernel(Y)
## non-parametric spectrum estimator (panel version)
results[["NPkernel-Panel"]] <- ppNPkernel(df, id.var=id.var, outcome.var=outcome.var)
class(results) <- 'spec.stat'
return(results)
}
############################################################################################################
## monte-carlo for causal inference analysis
############################################################################################################
simulCausalRun <- function(df, id.var, outcome.var, Nfreqs, rho, tau) {
results <- list()
df.treated <- subset(df, D==1)
df.control <- subset(df, D==0)
## theoretical spectrum
freq <- specTheoretical(model=list(ar=rho), freq=seq(0, 0.5, length.out=Nfreqs))$freq
results[["Theoretical"]] <- list(
'freq' = freq,
'spec.0' = specTheoretical(model=list(ar=rho), freq=seq(0, 0.5, length.out=Nfreqs))$spec,
'spec.1' = specTheoretical(model=list(ar=rho+tau), freq=seq(0, 0.5, length.out=Nfreqs))$spec
)
## simple periodogram estimator (panel version)
results[["NPclassic-Panel"]] <- list(
'freq' = freq,
'spec.0' = ppNPclassic(df.control, id.var=id.var, outcome.var=outcome.var, padding=0, symmetric=F)$spec,
'spec.1' = ppNPclassic(df.treated, id.var=id.var, outcome.var=outcome.var, padding=0, symmetric=F)$spec
)
## non-parametric spectrum estimator (panel version)
results[["NPkernel-Panel"]] <- list(
'freq' = freq,
'spec.0' = ppNPkernel(df.control, id.var=id.var, outcome.var=outcome.var)$spec,
'spec.1' = ppNPkernel(df.treated, id.var=id.var, outcome.var=outcome.var)$spec
)
class(results) <- 'spec.causal'
return(results)
}
############################################################################################################
## parse results
############################################################################################################
resultsGet <- function(results, cLevel = 0.95) {
# get alpha
al <- (1 - cLevel) / 2
# extract frequencies
freq <- results[[1]]$Theoretical$freq
if (methods::is(results, 'spec.stat')) {
# extract theoretical spectrum
specTrue <- data.frame(frequency=freq,
spec=results[[1]]$Theoretical$spec)
# extract NPclassic Panel results (yields a matrix Nfreqs x Nsims)
res1 <- sapply(results, function(res) res[["NPclassic-Panel"]]$spec)
smry1 <- t(apply(res1, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
# extract NPkernel Panel results (yields a matrix Nfreqs x Nsims)
res2 <- sapply(results, function(res) res[["NPkernel-Panel"]]$spec)
smry2 <- t(apply(res2, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
# prepare final dataframe
out <- rbind(
data.frame(estimator="NPclassic-Panel", frequency=freq, smry1),
data.frame(estimator="NPkernel-Panel", frequency=freq, smry2)
)
names(out) <- c(names(out)[1:2], "mean", "lb", "ub")
return(list(out=out, specTrue=specTrue, cLevel=cLevel))
} else if (methods::is(results, 'spec.causal')) {
# extract theoretical spectrum
specTrue <- data.frame(frequency=rep(freq, 2),
group=c(rep("control", length(freq)), rep("treated", length(freq))),
spec=c(results[[1]]$Theoretical$spec.0, results[[1]]$Theoretical$spec.1))
# extract NPclassic Panel results (yields a matrix Nfreqs x Nsims)
res1.0 <- sapply(results, function(res) res[["NPclassic-Panel"]]$spec.0)
res1.1 <- sapply(results, function(res) res[["NPclassic-Panel"]]$spec.1)
smry1.0 <- t(apply(res1.0, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
smry1.1 <- t(apply(res1.1, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
# extract NPkernel Panel results (yields a matrix Nfreqs x Nsims)
res2.0 <- sapply(results, function(res) res[["NPkernel-Panel"]]$spec.0)
res2.1 <- sapply(results, function(res) res[["NPkernel-Panel"]]$spec.1)
smry2.0 <- t(apply(res2.0, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
smry2.1 <- t(apply(res2.1, 1, function(x) c(mean(x), quantile(x, probs = c(al,1-al)))))
# prepare final dataframe
out <- rbind(
data.frame(estimator="NPclassic-Panel", group="control", frequency=freq, smry1.0),
data.frame(estimator="NPclassic-Panel", group="treated", frequency=freq, smry1.1),
data.frame(estimator="NPkernel-Panel", group="control", frequency=freq, smry2.0),
data.frame(estimator="NPkernel-Panel", group="treated", frequency=freq, smry2.1)
)
names(out) <- c("estimator", "group", "frequency", "mean", "lb", "ub")
return(list(out=out, specTrue=specTrue, cLevel=cLevel))
}
}
resultsParsed <- resultsGet(results)
theme_set(theme_bw())
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub, group=group, color=group), alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, group=group, color=group)) +
geom_line(aes(x=frequency, y=mean, group=group, color=group), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$"))
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub, group=group), alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, group=group, color=group)) +
geom_line(aes(x=frequency, y=mean, group=group, color=group), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$"))
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub, group=group), alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, group=group), color="black") +
geom_line(aes(x=frequency, y=mean, group=group, color=group), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid'))))
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub, group=group), alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, group=group), color="black") +
geom_line(aes(x=frequency, y=mean, group=group, color=group), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","#0B775E"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub, group=group), alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, group=group), color="black") +
geom_line(aes(x=frequency, y=mean, group=group, color=group), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","#0B775E"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
ggsave(filename=paste0(path, "simuls/mcCausalResults.png"), dpi="retina", width=10, height=6)
#########################################################################################
## Remember to check often that all the packages are updated!
#old.packages()
#update.packages(ask = FALSE)
remove.packages("scpi")
pacman::p_load(devtools, testthat)
#########################################################################################
## Change Version Below!!!
setwd("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/R/scpi")
# Prepare build ignore
usethis::use_build_ignore(c("tests", ".gitignore"))
#usethis::use_github_action_check_standard()
# Prepare documentation
devtools::document()
# Install and check
devtools::build()
devtools::install(upgrade = "never")
devtools::test()
rm(list = ls(all = TRUE))
pacman::p_load(TSA, ggplot2, latex2exp, np, Matrix)
if ((Sys.getenv("USER") == "fpalomba") & (Sys.info()["sysname"] == "Darwin")) {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/spectralTE/"
source(paste0(path, "code/funs.R"))
#Ncores <- parallel::detectCores() - 1
Ncores <- 5
} else {
path <- ""
}
########################
## Simulation params
Nsims  <- 200   # number of simulations
N      <- 100   # number of units
TT     <- 200   # number of periods each unit is observed
rho    <- 0.5   # AR(1) coefficient
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, rho = rho),
mc.cores = Ncores, mc.set.seed=8894)
df <- data[[1]]
df.i <- split(df, df[["id"]])
myfft <- function(y, omega, TT) {
eWi <- exp(-sqrt(as.complex(-1))*omega*c(1:TT))
J <- sum(y*eWi)
(1/(2*pi*TT)) * abs(J^2)
}
yy <- abs(fft(df.i[[1]]$Y)^2) * (1/(2*pi*TT))
freqs <- seq(from=0, to=pi, length.out=TT/2)
freqss <- seq(from=0, by=2*pi/TT, length.out=TT/2)
yyy <- unlist(lapply(freqss, function(w) myfft(df.i[[1]]$Y, w, TT)))
plot(freqs, type="l")
lines(freq)
lines(freqss)
freqss[100]
?TSA::ARMAspec
TSA::ARMAspec
################################################################################
## Cattaneo, Gupta, Palomba - Kernel Weighted Panel Periodogram
## R-file for Simulation of Kernel Weighted Panel Periodogram
## Authors: Matias D. Cattaneo, Abhimnayu Gupta, and Filippo Palomba
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
pacman::p_load(TSA, ggplot2, latex2exp, np, Matrix)
if ((Sys.getenv("USER") == "fpalomba") & (Sys.info()["sysname"] == "Darwin")) {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/spectralTE/"
source(paste0(path, "code/funs.R"))
#Ncores <- parallel::detectCores() - 1
Ncores <- 5
} else {
path <- ""
}
########################
## Simulation params
Nsims  <- 200   # number of simulations
N      <- 100   # number of units
TT     <- 200   # number of periods each unit is observed
rho    <- 0.5   # AR(1) coefficient
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, rho = rho),
mc.cores = Ncores, mc.set.seed=8894)
results <- parallel::mclapply(data, function(df) simulRun(df=df, id.var="id",
outcome.var="Y", Nfreqs=Nfreqs, rho=rho,
params.NPclassic=params.NPclassic,
params.NPsmoothed=params.NPsmoothed,
params.NPllr=params.NPllr),
mc.cores = Ncores, mc.set.seed=8894)
class(results) <- 'spec.stat'
resultsParsed <- resultsGet(results)
theme_set(theme_bw())
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub), fill="#899DA4", alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, color="black")) +
geom_line(aes(x=frequency, y=mean, color="#C93312"), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
View(results)
View(resultsParsed)
################################################################################
## Cattaneo, Gupta, Palomba - Kernel Weighted Panel Periodogram
## R-file for Simulation of Kernel Weighted Panel Periodogram
## Authors: Matias D. Cattaneo, Abhimnayu Gupta, and Filippo Palomba
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
pacman::p_load(TSA, ggplot2, latex2exp, np, Matrix)
if ((Sys.getenv("USER") == "fpalomba") & (Sys.info()["sysname"] == "Darwin")) {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/spectralTE/"
source(paste0(path, "code/funs.R"))
#Ncores <- parallel::detectCores() - 1
Ncores <- 5
} else {
path <- ""
}
########################
## Simulation params
Nsims  <- 200   # number of simulations
N      <- 100   # number of units
TT     <- 500   # number of periods each unit is observed
rho    <- 0.5   # AR(1) coefficient
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, rho = rho),
mc.cores = Ncores, mc.set.seed=8894)
results <- parallel::mclapply(data, function(df) simulRun(df=df, id.var="id",
outcome.var="Y", Nfreqs=Nfreqs, rho=rho,
params.NPclassic=params.NPclassic,
params.NPsmoothed=params.NPsmoothed,
params.NPllr=params.NPllr),
mc.cores = Ncores, mc.set.seed=8894)
class(results) <- 'spec.stat'
resultsParsed <- resultsGet(results)
theme_set(theme_bw())
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub), fill="#899DA4", alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, color="black")) +
geom_line(aes(x=frequency, y=mean, color="#C93312"), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
df <- data[[1]]
df.i <- split(df, df[["id"]])
res <- lapply(df.i, function(dfi)
periodogramNPllr(y=dfi[["Y"]], regtype="ll", bwtype="fixed", ckertype="gaussian"))
freq <- res[[1]]$freq
spec <- rowMeans(sapply(res, function(x) x$spec))
toplot <- rbind(
data.frame(freq=results[[1]]$Theoretical$freq, spec=results[[1]]$Theoretical$spec, estimator="theoretical"),
data.frame(freq=freq, spec=spec, estimator="llr")
)
ggplot(toplot) + geom_line(aes(x=freq, y=spec, group=estimator, color=estimator))
N      <- 50   # number of units
TT     <- 500   # number of periods each unit is observed
rho    <- 0.5   # AR(1) coefficient
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, rho = rho),
mc.cores = Ncores, mc.set.seed=8894)
df <- data[[1]]
df.i <- split(df, df[["id"]])
res <- lapply(df.i, function(dfi)
periodogramNPllr(y=dfi[["Y"]], regtype="ll", bwtype="fixed", ckertype="gaussian"))
freq <- res[[1]]$freq
spec <- rowMeans(sapply(res, function(x) x$spec))
toplot <- rbind(
data.frame(freq=results[[1]]$Theoretical$freq, spec=results[[1]]$Theoretical$spec, estimator="theoretical"),
data.frame(freq=freq, spec=spec, estimator="llr")
)
ggplot(toplot) + geom_line(aes(x=freq, y=spec, group=estimator, color=estimator))
res2 <- lapply(df.i, function(dfi)
periodogramNPllr(y=dfi[["Y"]], regtype="ll", bwtype="generalized_nn", ckertype="gaussian"))
spec2 <- rowMeans(sapply(res2, function(x) x$spec))
res3 <- lapply(df.i, function(dfi)
periodogramNPllr(y=dfi[["Y"]], regtype="ll", bwtype="adaptive_nn", ckertype="gaussian"))
spec3 <- rowMeans(sapply(res3, function(x) x$spec))
toplot <- rbind(
data.frame(freq=results[[1]]$Theoretical$freq, spec=results[[1]]$Theoretical$spec, estimator="theoretical"),
data.frame(freq=freq, spec=spec, estimator="llr"),
data.frame(freq=freq, spec=spec2, estimator="llr-gen nn"),
data.frame(freq=freq, spec=spec3, estimator="llr-gen adapt")
)
ggplot(toplot) + geom_line(aes(x=freq, y=spec, group=estimator, color=estimator))
?np::npreg
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub), fill="#899DA4", alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, color="black")) +
geom_line(aes(x=frequency, y=mean, color="#C93312"), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
ggsave(filename=paste0(path, "simuls/mcResults_T500.png"), dpi="retina", width=10, height=6)
TSA::ARMAspec(model=(ar=c(0,0.5)), freq=freq, plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5)), freq=freq, plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0,00.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0,0,0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5,0,0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.25,0,0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5,0,0.25)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(1)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(1, 0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(-1, 0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(-0.1, 0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(-0.1, 0, 0.5)), freq=freq/(2*pi), plot=T)
TSA::ARMAspec(model=list(ar=c(0,0.5), ma=c(-0.1, 0, 0.7)), freq=freq/(2*pi), plot=T)
?arima.sim
model <- list(ar=c(0,0.5), ma=c(-0.1, 0, 0.7)) # ARMA with seasonal AR and MA
arima.sim(model, 10)
################################################################################
## Cattaneo, Gupta, Palomba - Kernel Weighted Panel Periodogram
## R-file for Simulation of Kernel Weighted Panel Periodogram
## Authors: Matias D. Cattaneo, Abhimnayu Gupta, and Filippo Palomba
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
pacman::p_load(TSA, ggplot2, latex2exp, np, Matrix)
if ((Sys.getenv("USER") == "fpalomba") & (Sys.info()["sysname"] == "Darwin")) {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/spectralTE/"
source(paste0(path, "code/funs.R"))
#Ncores <- parallel::detectCores() - 1
Ncores <- 5
} else {
path <- ""
}
########################
## Simulation params
Nsims  <- 200   # number of simulations
N      <- 100   # number of units
TT     <- 500   # number of periods each unit is observed
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
########################
# choose your model
model <- list(ar=(0.5)) # simple AR(1)
model <- list(ar=c(0,0.5), ma=c(-0.1, 0, 0.7)) # ARMA with seasonal AR and MA
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, model = model),
mc.cores = Ncores, mc.set.seed=8894)
################################################################################
## Cattaneo, Gupta, Palomba - Kernel Weighted Panel Periodogram
## R-file for Simulation of Kernel Weighted Panel Periodogram
## Authors: Matias D. Cattaneo, Abhimnayu Gupta, and Filippo Palomba
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
pacman::p_load(TSA, ggplot2, latex2exp, np, Matrix)
if ((Sys.getenv("USER") == "fpalomba") & (Sys.info()["sysname"] == "Darwin")) {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/spectralTE/"
source(paste0(path, "code/funs.R"))
#Ncores <- parallel::detectCores() - 1
Ncores <- 5
} else {
path <- ""
}
########################
## Simulation params
Nsims  <- 200   # number of simulations
N      <- 100   # number of units
TT     <- 500   # number of periods each unit is observed
Nfreqs <- TT/2  # number of fourier frequencies at which we estimate the spectrum
########################
########################
# choose your model
model <- list(ar=(0.5)) # simple AR(1)
model <- list(ar=c(0,0.5), ma=c(-0.1, 0, 0.7)) # ARMA with seasonal AR and MA
########################
# list specifying parameters for each estimator
params.NPclassic <- list(padding = 0, symmetric = FALSE)
params.NPsmoothed <- list(spans = NULL, kernel = NULL, taper = NULL, padding = 0,
fast = TRUE, demean = FALSE, detrend = FALSE)
params.NPllr <- list(regtype="lc", kernel="gaussian", bwtype="fixed", Nfreqs=Nfreqs)
## Simulate Data (N=100, T=200, each time series is AR(1))
data <- parallel::mclapply(c(1:Nsims),
function(x) simulModel(N = N, TT = TT, model = model),
mc.cores = Ncores, mc.set.seed=8894)
results <- parallel::mclapply(data, function(df) simulRun(df=df, id.var="id",
outcome.var="Y", Nfreqs=Nfreqs, model=model,
params.NPclassic=params.NPclassic,
params.NPsmoothed=params.NPsmoothed,
params.NPllr=params.NPllr),
mc.cores = Ncores, mc.set.seed=8894)
class(results) <- 'spec.stat'
resultsParsed <- resultsGet(results)
theme_set(theme_bw())
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub), fill="#899DA4", alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, color="black")) +
geom_line(aes(x=frequency, y=mean, color="#C93312"), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
?forecast::Arima
?forecast::simulate.Arima
forecast::simulate.Arima(object=model, nsim=10)
theme_set(theme_bw())
ggplot(resultsParsed$out) +
geom_ribbon(aes(x=frequency, ymin=lb, ymax=ub), fill="#899DA4", alpha=0.2) +
geom_line(data=resultsParsed$specTrue, aes(x=frequency, y=spec, color="black")) +
geom_line(aes(x=frequency, y=mean, color="#C93312"), linetype="dashed") +
facet_wrap(~estimator) + ylab(TeX("$f(\\omega)")) + xlab(TeX("$\\omega$")) +
scale_color_manual(values = c("#C93312","black"), name = "",
labels = c("Estimated", "True"),
guide = guide_legend(override.aes = list(linetype = c('dashed','solid')))) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
strip.background = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA))
ggsave(filename=paste0(path, "simuls/mcResults_seasARMA.png"), dpi="retina", width=10, height=6)
