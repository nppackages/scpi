scale_color_manual(values = wes_palette("Darjeeling1"), name = "",
labels = c("Control", "Treated"),
guide = guide_legend(override.aes = list(shape = c(16, 17)))) +
guides(shape="none", size="none", colour = guide_legend(nrow = 1)) +
annotate("text", x = 0.58, y = 0.55, label = TeX("$s_{(1)}(\\omega)$"), size=7, color="black") +
annotate("text", x = 2.8, y = 0.15, label = TeX("$s_{(0)}(\\omega)$"), size=7, color="black") +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
text = element_text(size = 15),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(path,"potential_spectra.png"), height = 6, width = 10)
# same picture with stochastic processes but with estimands on top
omega <- pi/2
omega_grid <- which.min(abs(grid_spec - omega))
kappa_lf <- pi/4
kappa_hf <- omega
dfline <- data.frame(x = omega,
ymin = spec_y0[omega_grid],
ymax = spec_y1[omega_grid])
ggplot() +
geom_line(data=toplot, aes(x=freq, y=value, color=variable), size=1.2) +
xlab(TeX("$\\omega$")) + ylab(TeX("$s_{(d)}(\\omega)$")) +
scale_color_manual(values = wes_palette("Darjeeling1"), name = "",
labels = c("Control", "Treated"),
guide = guide_legend(override.aes = list(shape = c(16, 17)))) +
guides(shape="none", size="none", colour = guide_legend(nrow = 1)) +
geom_linerange(data=dfline, aes(x=x, ymin=ymin, ymax=ymax), color="black", size = 1.1) +
geom_ribbon(data=subset(df, freq <= kappa_lf),
aes(x=freq, ymin=s0,ymax=s1), fill="#00A08A",  alpha=0.2) +
geom_ribbon(data=subset(df, freq >= kappa_hf),
aes(x=freq, ymin=s1,ymax=s0), fill="#FF0000", alpha=0.2) +
annotate("text", x = dfline$x, y = dfline$ymax + 0.07, label = TeX("$\\Delta_{STE}(\\pi/2)$"), size=7, color="black") +
annotate("text", x = 0.38, y = 0.62, label = TeX("$s_{(1)}(\\omega)$"), size=5, color="black") +
annotate("text", x = 0.15, y = 0.2, label = TeX("$s_{(0)}(\\omega)$"), size=5, color="black") +
annotate("text", x = 0.85, y = 0.45, label = TeX("$\\Delta_{STE}((0,\\pi/4))$"), size=7, color="#00A08A", alpha=0.8) +
annotate("text", x = 2.8, y = 0.15, label = TeX("$\\Delta_{STE}((\\pi/2,\\pi))$"), size=7, color="#FF0000", alpha=0.8) +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),
legend.justification = c(1, 1), legend.position = c(1, 1),
legend.background = element_rect(fill='transparent', colour = NA),
legend.box.background = element_rect(fill='transparent', colour = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.key.size = unit(1, 'cm'),
legend.text = element_text(size = 15),
text = element_text(size = 15),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
ggsave(paste0(path,"potential_spectra_estimands.png"), height = 6, width = 10)
#########################################################################################
## Remember to check often that all the packages are updated!
#old.packages()
#update.packages(ask = FALSE)
remove.packages("scpi")
pacman::p_load(devtools, testthat)
#########################################################################################
## Change Version Below!!!
setwd("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/R/scpi")
# Prepare build ignore
usethis::use_build_ignore(c("tests",".gitignore"))
#usethis::use_github_action_check_standard()
# Prepare documentation
devtools::document()
# Install and check
devtools::build()
devtools::install(upgrade = "never")
################################################################################
## SCPI R Package
## R-file for Empirical Illustration - Multiple Treated Units
## Authors: Matias D. Cattaneo, Yingjie Feng, Filippo Palomba and Rocio Titiunik
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
### Install R library
#install.packages("scpi")
### Load SCPI package
library(scpi)
###############################################################################
# MULTIPLE TREATED UNITS
###############################################################################
### Load data
data <- scpi_germany
# Create a second placebo treated unit
data$treatment <- 0
data[(data$country == "West Germany" & data$year >= 1991), "treatment"] <- 1
data[(data$country == "Italy" & data$year >= 1992), "treatment"] <- 1
df <- scdataMulti(data, id.var = "country", outcome.var = "gdp",
treatment.var = "treatment", time.var = "year", constant = TRUE,
cointegrated.data = TRUE, features = list(c("gdp", "trade")),
cov.adj = list(c("constant", "trend")), effect = "time")
res <- scest(df, w.constr = list("name" = "simplex"))
scplotMulti(res)
respi <- scpi(df, w.constr = list("name" = "simplex"), cores = 1, sims = 50,
e.method = "gaussian")
scplotMulti(respi, type = "series")
scplotMulti(respi, type = "series", joint = TRUE)
################################################################################
## SCPI R Package
## R-file for Empirical Illustration - Multiple Treated Units
## Authors: Matias D. Cattaneo, Yingjie Feng, Filippo Palomba and Rocio Titiunik
################################################################################
### Clear R environment
rm(list = ls(all = TRUE))
### Install R library
#install.packages("scpi")
### Load SCPI package
library(scpi)
###############################################################################
# MULTIPLE TREATED UNITS
###############################################################################
### Load data
data <- scpi_germany
# Create a second placebo treated unit
data$treatment <- 0
data[(data$country == "West Germany" & data$year >= 1991), "treatment"] <- 1
data[(data$country == "Italy" & data$year >= 1992), "treatment"] <- 1
######################################################
# unit-time treatment effect (\tau_{ik})
######################################################
df <- scdataMulti(data, id.var = "country", outcome.var = "gdp",
treatment.var = "treatment", time.var = "year", constant = TRUE,
cointegrated.data = TRUE, features = list(c("gdp", "trade")),
cov.adj = list(c("constant", "trend")))
res <- scest(df, w.constr = list("name" = "simplex"))
scplotMulti(res)
respi <- scpi(df, w.constr = list("name" = "simplex"), cores = 1, sims = 50,
e.method = "gaussian")
# plot series
scplotMulti(respi, type = "series")
# plot treatment
scplotMulti(respi, type = "series", joint = TRUE)
######################################################
# average unit treatment effect (\tau_{i.})
######################################################
df <- scdataMulti(data, id.var = "country", outcome.var = "gdp",
treatment.var = "treatment", time.var = "year", constant = TRUE,
cointegrated.data = TRUE, features = list(c("gdp", "trade")),
cov.adj = list(c("constant", "trend")), effect = "unit")
res <- scest(df, w.constr = list("name" = "simplex"))
scplotMulti(res)
respi <- scpi(df, w.constr = list("name" = "simplex"), cores = 1, sims = 50,
e.method = "gaussian")
# plot series
scplotMulti(respi, type = "series")
# plot treatment
scplotMulti(respi, type = "series", joint = TRUE)
######################################################
# average treatment effect on the treated (\tau_{.k})
######################################################
df <- scdataMulti(data, id.var = "country", outcome.var = "gdp",
treatment.var = "treatment", time.var = "year", constant = TRUE,
cointegrated.data = TRUE, features = list(c("gdp", "trade")),
cov.adj = list(c("constant", "trend")), effect = "time")
res <- scest(df, w.constr = list("name" = "simplex"))
scplotMulti(res)
respi <- scpi(df, w.constr = list("name" = "simplex"), cores = 1, sims = 50,
e.method = "gaussian")
# plot series
scplotMulti(respi, type = "series")
# plot treatment
scplotMulti(respi, type = "series", joint = TRUE)
################################################################################
## SCPI R Package
## R-file for Empirical Illustration - Multiple Treated Units
## Authors: Matias D. Cattaneo, Yingjie Feng, Filippo Palomba and Rocio Titiunik
################################################################################
### Clear R environment
rm(list=ls(all=TRUE))
### Install R library
#install.packages('scpi')
### Load packages
library(scpi)
library(ggplot2)
theme_set(theme_bw())
###############################################################################
# MULTIPLE TREATED UNITS
###############################################################################
### Load data
data <- scpi_germany
data$treatment <- 0
data[(data$country == "West Germany" & data$year >= 1991), 'treatment'] <- 1
data[(data$country == "Italy" & data$year >= 1992), 'treatment'] <- 1
###############################################
# unit-time treatment effect
###############################################
df <- scdataMulti(data, id.var = "country", outcome.var = "gdp",
treatment.var = "treatment", time.var = "year", constant = TRUE,
cointegrated.data = T, features = list(c("gdp","trade")),
cov.adj = list(c("constant", "trend")))
res.pi <- scpi(df, w.constr = list("name" = "simplex"), cores = 1, sims = 50,
e.method = "gaussian")
# plot series
scplotMulti(res.pi, type = "series", joint = TRUE, save.data = '__scpi_data')
load('__scpi_data.RData')
plot <- ggplot(toplot) + xlab("Date") + ylab("Outcome") +
geom_line(aes(x=Time, y=Y, colour=Type)) +
geom_point(aes(x=Time, y=Y, colour=Type), size=1.5) +
geom_vline(aes(xintercept=Tdate)) +
facet_wrap(~ID, ncol = 2) + theme(legend.position="bottom") +
scale_color_manual(name = "", values = c("black", "blue"),
labels = c("Treated", "Synthetic Control"))
plot.w1 <- plot + geom_errorbar(data = toplot,
aes(x = Time, ymin = lb.gaussian, ymax = ub.gaussian), colour = "blue",
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty - Subgaussian Bounds")
plotdf <- subset(toplot, Type == "Synthetic")
plot.w1 + geom_ribbon(data=plotdf, aes(x=Time, ymin=lb.joint, ymax=ub.joint), fill="blue", alpha=0.1)
################################################################################
## SCPI R Package
## R-file for Empirical Illustration - Single Treated Unit
## Authors: Matias D. Cattaneo, Yingjie Feng, Filippo Palomba and Rocio Titiunik
################################################################################
### Clear R environment
rm(list=ls(all=TRUE))
### Install R library
#install.packages('scpi')
### Load SCPI package
library(scpi)
library(ggplot2)
library(latex2exp)
###############################################################################
# SINGLE TREATED UNIT
###############################################################################
### Load data
data <- scpi_germany
####################################
### Set options for data preparation
id.var      <- "country"                              # ID variable
time.var    <- "year"                                 # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)    # Pre-treatment period
period.post <- (1991:2003)                            # Post-treatment period
unit.tr     <- "West Germany"                         # Treated unit (in terms of id.var)
unit.co     <- setdiff(unique(data$country), unit.tr) # Donors pool
outcome.var <- "gdp"                                  # Outcome variable
cov.adj     <- NULL                                   # Covariates for adjustment
features    <- NULL                                   # No features other than outcome
constant    <- FALSE                                  # No constant term
report.missing <- FALSE                               # To check where missing values are
cointegrated.data <- TRUE                             # Belief that the data are cointegrated
####################################
### Data preparation
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant, cointegrated.data = cointegrated.data)
####################################
### SC - point estimation with simplex
est.si  <- scest(data = df, w.constr = list(name="simplex"))
# Use print or summary methods to check results
print(est.si)
summary(est.si)
est.si2 <- scest(data = df, w.constr = list(p = "L1", dir = "==", Q = 1, lb = 0))
summary(est.si2)
####################################
### SC - plot results
scplot(result = est.si, fig.path = ".",
fig.name = "germany_est", fig.format = "png", plot.range = (1960:2003),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
event.label = list(lab = "Reunification", height = 10))
####################################
### SC - point estimation with lasso
est.lasso <- scest(data = df, w.constr = list(name="lasso"))
summary(est.lasso)
est.lasso2 <- scest(data = df, w.constr = list(p = "L1", dir = "<=", Q = 1, lb = -Inf))
summary(est.lasso2)
####################################
### SC - point estimation with ridge
est.ridge <- scest(data = df, w.constr = list(name="ridge"))
summary(est.ridge)
Qest <- est.ridge$est.results$w.constr$Q
est.ridge2 <- scest(data = df, w.constr = list(p = "L2", dir = "<=", Q = Qest, lb = -Inf))
summary(est.ridge2)
####################################
### SC - point estimation with L1-L2
est.l1l2 <- scest(data = df, w.constr = list(name="L1-L2"))
summary(est.l1l2)
est.l1l2.2 <- scest(data = df, w.constr = list(p = "L1-L2", dir = "==/<=", Q = 1,
Q2 = Qest, lb = 0))
summary(est.l1l2.2)
####################################
### SC - point estimation with least squares
est.ls <- scest(data = df, w.constr = list(name="ols"))
summary(est.ls)
est.ls2 <- scest(data = df, w.constr = list(p = "no norm", dir = NULL, Q = NULL, lb = -Inf))
summary(est.ls2)
####################################
## Set options for inference
u.alpha  <- 0.05                         # Confidence level (in-sample uncertainty)
e.alpha  <- 0.05                         # Confidence level (out-of-sample uncertainty)
rho      <- NULL                         # Regularization parameter (if NULL it is estimated)
rho.max  <- 1                            # Maximum value attainable by rho
sims     <- 200                          # Number of simulations
u.order  <- 1                            # Degree of polynomial in B and C when modelling u
u.lags   <- 0                            # Lags of B to be used when modelling u
u.sigma  <- "HC1"                        # Estimator for the variance-covariance of u
u.missp  <- T                            # If TRUE then the model is treated as misspecified
e.lags   <- 0                            # Degree of polynomial in B and C when modelling e
e.order  <- 1                            # Lags of B to be used when modelling e
e.method <- "gaussian"                   # Estimation method for out-of-sample uncertainty
cores    <- 1                            # Number of cores to be used by scpi
w.constr <- list(name = "simplex")       # Simplex-type constraint set
set.seed(8894)
pi.si   <- scpi(data = df,u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags,
e.method = e.method, cores = cores, w.constr = w.constr, u.alpha = u.alpha,
e.alpha = e.alpha, rho = rho, rho.max = rho.max)
# Use print or summary methods to check results
print(pi.si)
summary(pi.si)
####################################
### SC - plot results
scplot(result = pi.si, fig.path = ".",
fig.name = "germany_unc", fig.format = "png", plot.range = (1960:2003),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
x.ticks = NULL, e.out = T, event.label = list(lab = "Reunification", height = 10))
########################################################
# Sensitivity Analysis for 1997 using subgaussian bounds
########################################################
set.seed(8894)
res.si  <- scpi(data = df, sims = sims, e.method = "gaussian", e.order = e.order, e.lags = e.lags,
u.order = u.order, u.lags = u.lags, u.sigma = u.sigma, u.missp = u.missp,
cores = cores, w.constr = list(name = "simplex"), lgapp = "linear")
e.alpha <- 0.05  # default level in scpi
sens <- c(0.25, 0.5, 1, 1.5, 2)
time <- c(1997)
emean <- res.si$inference.results$e.mean
esig <- sqrt(res.si$inference.results$e.var)
sc.l.0 <- res.si$inference.results$CI.in.sample[,1,drop = F]
sc.r.0 <- res.si$inference.results$CI.in.sample[,2,drop = F]
y <- res.si$data$Y.post
for (l in 1:length(time)) {
ssc.l.1 <- ssc.r.1 <- c()
e.mean <- emean[time[l]-1990]
sig <- esig[time[l]-1990]
sig.seq <- sens*sig
for (s in 1:length(sig.seq)) {
eps  <- sqrt(-log(e.alpha/2)*2*(sig.seq[s]^2))
ssc.l.1[s] <- sc.l.0[time[l]-1990] + e.mean - eps
ssc.r.1[s] <- sc.r.0[time[l]-1990] + e.mean + eps
}
sen.dat <- data.frame(t=c(1:5), lb1=ssc.l.1, ub1=ssc.r.1,
lb=rep(sc.l.0[time[l]-1990], 5),
ub=rep(sc.r.0[time[l]-1990], 5),
lab=as.factor(sens))
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x="sd. of e", y="GDP per capita (thousand US dollars)")
plot <- plot + geom_errorbar(data=sen.dat, aes(x=lab, ymin=lb1, ymax=ub1),
col="maroon", width=0.2, linetype=5) +
geom_errorbar(data=sen.dat, aes(x=lab, ymin=lb, ymax=ub),
col="blue", width=0.2, linetype=1) +
geom_hline(yintercept = y[time[l]-1990], linetype=1, linewidth=0.3, alpha=0.8) +
annotate("text", x=5.4, y=y[time[l]-1990]-.1,label="Y(1)", size=3.5) +
scale_x_discrete(labels=c(parse(text=TeX("$0.25\\hat{\\sigma}$")),
parse(text=TeX("$0.5\\hat{\\sigma}$")),
parse(text=TeX("$\\hat{\\sigma}$")),
parse(text=TeX("$1.5\\hat{\\sigma}$")),
parse(text=TeX("$2\\hat{\\sigma}$"))))
ggsave(paste("sensitivity", l, ".png", sep=""), width=6, height=4.5, dpi=1000)
}
################################################################################
### Other examples of data preparation
## multiple features
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = c("gdp", "trade"),
constant = constant, cointegrated.data = cointegrated.data)
## multiple features and featuer-specific covariate adjustment
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, features = c("gdp", "trade"),
cov.adj = list('gdp' = c("constant","trend"), 'trade' = c("constant")),
constant = constant, cointegrated.data = cointegrated.data)
getwd()
################################################################################
## SCPI R Package
## R-file for Empirical Illustration - Single Treated Unit
## Authors: Matias D. Cattaneo, Yingjie Feng, Filippo Palomba and Rocio Titiunik
################################################################################
### Clear R environment
rm(list=ls(all=TRUE))
### Install R library
#install.packages('scpi')
### Load packages
library(scpi)
library(ggplot2)
theme_set(theme_bw())
##############################################################################
# SINGLE TREATED UNIT
##############################################################################
### Load data
data <- scpi_germany
####################################
### Set options for data preparation
id.var      <- "country"                              # ID variable
time.var    <- "year"                                 # Time variable
period.pre  <- seq(from = 1960, to = 1990, by = 1)    # Pre-treatment period
period.post <- (1991:2003)                            # Post-treatment period
unit.tr     <- "West Germany"                         # Treated unit (in terms of id.var)
unit.co     <- setdiff(unique(data$country), unit.tr) # Donors pool
outcome.var <- "gdp"                                  # Outcome variable
cov.adj     <- NULL                                   # Covariates for adjustment
features    <- NULL                                   # No features other than outcome
constant    <- FALSE                                  # No constant term
report.missing <- FALSE                               # To check where missing values are
cointegrated.data <- TRUE                             # Belief that the data are cointegrated
####################################
### Data preparation
df  <-   scdata(df = data, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant, cointegrated.data = cointegrated.data)
####################################
## Set options for inference
u.alpha  <- 0.05                         # Confidence level (in-sample uncertainty)
e.alpha  <- 0.05                         # Confidence level (out-of-sample uncertainty)
rho      <- NULL                         # Regularization parameter (if NULL it is estimated)
rho.max  <- 1                            # Maximum value attainable by rho
sims     <- 200                          # Number of simulations
V        <- NULL                         # Weighting matrix (if NULL it is the identity matrix)
u.order  <- 1                            # Degree of polynomial in B and C when modelling u
u.lags   <- 0                            # Lags of B to be used when modelling u
u.sigma  <- "HC1"                        # Estimator for the variance-covariance of u
u.missp  <- T                            # If TRUE then the model is treated as misspecified
e.lags   <- 0                            # Degree of polynomial in B and C when modelling e
e.order  <- 1                            # Lags of B to be used when modelling e
e.method <- "gaussian"                   # Estimation method for out-of-sample uncertainty
cores    <- 1                            # Number of cores to be used by scpi
w.constr <- list(name = "simplex")       # Simplex-type constraint set
set.seed(8894)
result  <- scpi(data = df,u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags,
e.method = e.method, cores = cores, w.constr = w.constr, u.alpha = u.alpha,
e.alpha = e.alpha, rho = rho, rho.max = rho.max)
####################################
### SC - plot results
scplot(result = result, fig.path = ".",
fig.name = "germany_unc", fig.format = "png", plot.range = (1960:2003),
label.xy = list(x.lab = "Year", y.lab = "GDP per capita (thousand US dollars)"),
x.ticks = NULL, e.out = T, event.label = list(lab = "Reunification", height = 10))
####################################
### SC - manually reproduce plot
# Store data on treated unit, synthetic unit, and prediction bars
y.fit <- rbind(result$est.results$Y.pre.fit, result$est.results$Y.post.fit)
y.act <- rbind(result$data$Y.pre, result$data$Y.post)
sc.l  <- result$inference.results$CI.all.gaussian[, 1, drop = FALSE]
sc.r  <- result$inference.results$CI.all.gaussian[, 2, drop = FALSE]
# Store other specifics
period.pre  <- result$data$specs$period.pre
period.post <- result$data$specs$period.post
T0          <- period.pre[length(period.pre)] # intercept
plot.range  <- c(period.pre, period.post)
# Actual data
dat    <- data.frame(t     = c(period.pre, period.post),
Y.act = c(y.act),
sname = "Treated")
# Fill with NAs Y.fit and confidence bounds where missing
Y.fit.na  <- matrix(NA, nrow = length(c(period.pre, period.post)))
sc.l.na   <- matrix(NA, nrow = length(c(period.pre, period.post)))
sc.r.na   <- matrix(NA, nrow = length(c(period.pre, period.post)))
names <- strsplit(rownames(y.fit), "\\.")
not.missing.plot <- c(period.pre,period.post) %in% unlist(lapply(names, "[[", 2))
names <- strsplit(rownames(sc.l), "\\.")
not.missing.ci   <- c(period.pre,period.post) %in% unlist(lapply(names, "[[", 2))
Y.fit.na[not.missing.plot, 1] <- y.fit
sc.l.na[not.missing.ci, 1]    <- sc.l
sc.r.na[not.missing.ci, 1]    <- sc.r
# Synthetic unit data
dat.sc <- data.frame(t        = c(period.pre, period.post),
Y.sc     = Y.fit.na,
lb       = c(sc.l.na), ub = c(sc.r.na),
sname    = "SC Unit")
# Set ticks, event label and merge
x.ticks <- c(seq(plot.range[1], plot.range[length(plot.range)], length.out = 5), T0)
x.ticks <- round(unique(x.ticks))
event.lab <- paste("\n", "Reunification", sep = "")
event.lab.height <- 10
dat.plot    <- subset(dat,    t %in% plot.range)
dat.sc.plot <- subset(dat.sc, t %in% plot.range)
plotdf <- dplyr::left_join(dat.plot, dat.sc.plot, by = 't')
## Plot specs
plot <- ggplot() + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
labs(x = "Year", y = "GDP per capita (thousand US dollars)") +
theme(legend.position = "bottom", legend.box = "horizontal", legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black"))
## Add Series to plot
plot <- plot +
geom_line( data = plotdf, aes(x = t, y = Y.act, colour = sname.x), linetype = 'solid') +
geom_point(data = plotdf, aes(x = t, y = Y.act, colour = sname.x), shape = 1) +
geom_line( data = plotdf, aes(x = t, y = Y.sc,  colour = sname.y), linetype = 'dashed') +
geom_point(data = plotdf, aes(x = t, y = Y.sc,  colour = sname.y), shape = 19) +
geom_vline(xintercept = T0, linetype = "dashed") +
geom_text(aes(x = T0, label = event.lab, y = event.lab.height), angle = 90, size = 4) +
scale_x_continuous(breaks = x.ticks) +
scale_color_manual(name = "", values = c("mediumblue", "grey46"),
labels = c("Synthetic Control", "Treated"),
guide = guide_legend(override.aes = list(
linetype = c('dashed','solid'), shape = c(19, 1))))
## Add confidence bars and plot
plot + geom_errorbar(data = plotdf,
aes(x = t, ymin = lb, ymax = ub, colour = sname.y),
width = 0.5, linetype = 1) + ggtitle("In and Out of Sample Uncertainty")
print(plot)
help(package="scpi")
