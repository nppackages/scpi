for (c in covs.high) {
toplot$label[toplot$variable == c] <- 1 + j
j <- j + 1
}
toplot$label <- as.factor(toplot$label)
toplot$census <- 0
toplot$census[(toplot$variable %in% covs.high) & (toplot$variable %in% covs.census)] <- 1
toplot$census <- as.factor(toplot$census)
theme_set(theme_bw())
p <- ggplot(data=toplot, aes(x=logl, y=value, group=variable)) +
geom_line(aes(color = label, size = label, alpha = label, linetype=census)) +
labs(x="$\\log(\\lambda)$", y="$\\widehat{\\theta}^{\\mathtt{LASSO}}$") +
geom_vline(xintercept = log(lasso1.cv$lambda.min)/2 + log(lasso1.cv$lambda.1se)/2, linetype  = "dashed") +
scale_color_manual(name = "",values=c("grey",colors)) +
scale_size_manual(name = "",values=c(0.8,rep(1,length(covs.high)))) +
scale_alpha_manual(name = "",values=c(0.25,rep(1,length(covs.high)))) +
scale_linetype_manual(values=c("solid","11")) +
theme(legend.position="none") +
annotate("text", x = -7.3, y = -0.1, label = "Size", color = colors[1]) +
annotate("text", x = -11, y = -0.05, label = "Managers", color = colors[2]) +
annotate("text", x = -7.5, y = 0.3, label = "Subsidy", color = colors[3]) +
annotate("text", x = -12.8, y = 0.02, label = "Past Growth", color = colors[4]) +
annotate("text", x = -11.8, y = -0.15, label = "Participation Rate (male)", color = colors[5]) +
annotate("text", x = -11, y = 0.05, label = "NEET", color = colors[6]) +
annotate("text", x = -9, y = 0.02, label = "Empl Share (industry)", color = colors[7]) +
annotate("text", x = -10, y = 0.12, label = "Empl Share (trade)", color = colors[8]) +
annotate("text", x = -10, y = -0.05, label = "Firm Age", color = colors[9]) +
annotate("text", x = -10, y = -0.09, label = "Average Wage", color = colors[10])
ggsave(filename = paste0(path.figs,"Figure_01b.png"), plot = p, height=5,width=8,dpi="retina")
tikz(file = paste0(path.figs, "Figure_01b.tex"), width = 8, height = 6)
p
dev.off()
rm(list = ls(all = TRUE))
pacman::p_load(gtools, ggplot2, haven, latex2exp)
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/l488/7.write/spring23/spearman_exact_pval/"
source(paste0(path, "funs.R"))
Nlist <- c(2:7)
res <- lapply(Nlist, function(n) spearDistGet(n, "spearman"))
names(res) <- as.character(Nlist)
toplot <- data.frame(freq = c(c(res[["2"]]$pmf), c(res[["3"]]$pmf), c(res[["4"]]$pmf),
c(res[["5"]]$pmf), c(res[["6"]]$pmf), c(res[["7"]]$pmf)),
support = c(as.numeric(names(res[["2"]]$pmf)), as.numeric(names(res[["3"]]$pmf)),
as.numeric(names(res[["4"]]$pmf)), as.numeric(names(res[["5"]]$pmf)),
as.numeric(names(res[["6"]]$pmf)), as.numeric(names(res[["7"]]$pmf))),
n = as.factor(paste0("n = ", c(rep(2, length(res[["2"]]$pmf)), rep(3, length(res[["3"]]$pmf)), rep(4, length(res[["4"]]$pmf)),
rep(5, length(res[["5"]]$pmf)), rep(6, length(res[["6"]]$pmf)), rep(7, length(res[["7"]]$pmf))))))
levels(toplot$n) <- c("n = 2" = TeX("$n = 2$"), "n = 3" = TeX("$n = 3$"), "n = 4" = TeX("$n = 4$"),
"n = 5" = TeX("$n = 5$"), "n = 6" = TeX("$n = 6$"), "n = 7" = TeX("$n = 7$"))
theme_set(theme_bw())
ggplot(toplot) + geom_point(aes(x=support, y=freq)) +
facet_wrap(~n, scale="free", labeller=label_parsed) + ylab("pmf") + xlab(TeX("$\\rho"))
rm(list = ls(all = TRUE))
pacman::p_load(gtools, ggplot2, haven, latex2exp)
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/l488/7.write/spring23/spearman_exact_pval/"
source(paste0(path, "funs.R"))
# compute exact empirical distribution of Rspearman under H0 (x and y are independent)
Nlist <- c(2:7)
res <- lapply(Nlist, function(n) spearDistGet(n, "spearman"))
names(res) <- as.character(Nlist)
toplot <- data.frame(freq = c(c(res[["2"]]$pmf), c(res[["3"]]$pmf), c(res[["4"]]$pmf),
c(res[["5"]]$pmf), c(res[["6"]]$pmf), c(res[["7"]]$pmf)),
support = c(as.numeric(names(res[["2"]]$pmf)), as.numeric(names(res[["3"]]$pmf)),
as.numeric(names(res[["4"]]$pmf)), as.numeric(names(res[["5"]]$pmf)),
as.numeric(names(res[["6"]]$pmf)), as.numeric(names(res[["7"]]$pmf))),
n = as.factor(paste0("n = ", c(rep(2, length(res[["2"]]$pmf)), rep(3, length(res[["3"]]$pmf)), rep(4, length(res[["4"]]$pmf)),
rep(5, length(res[["5"]]$pmf)), rep(6, length(res[["6"]]$pmf)), rep(7, length(res[["7"]]$pmf))))))
levels(toplot$n) <- c("n = 2" = "$n = 2$", "n = 3" = "$n = 3$", "n = 4" = "$n = 4$",
"n = 5" = "$n = 5$", "n = 6" = "$n = 6$", "n = 7" = "$n = 7$")
theme_set(theme_bw())
p <- ggplot(toplot) + geom_point(aes(x=support, y=freq), size=3, color="#5B1A18") +
facet_wrap(~n, scale="free") +
ylab("probability mass function") + xlab("$\\rho$") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
strip.background = element_blank(),
strip.text = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave(paste0(path.figs, "Figure_S12.png"), plot = p, dpi="retina", width=10, height=7)
ggsave(paste0(path, "Figure_S12.png"), plot = p, dpi="retina", width=10, height=7)
tikz(file = paste0(path, "Figure_S12.tex"), width = 10, height = 7)
p
dev.off()
df <- haven::read_dta(paste0(path, "data.dta"))
cells <- split(df, df$ce)
Rspear <- lapply(cells, function(c) list(rho=cor(c$regind1_norm, c$SR, method = "spearman"),
N=unique(c$conta)))
Rspear.df <- data.frame(cbind(unlist(lapply(Rspear, "[[", 1)), unlist(lapply(Rspear, "[[", 2))))
names(Rspear.df) <- c("rho", "N")
# if H0 is true, Rspear is multinomial with probabilities computed above
# so we can run a pearson chisquare test
test <- lapply(Nlist, function(n) chisqGet(n, Rspear.df, res))
names(test) <- as.character(Nlist)
# results of chi square test
lapply(Nlist, function(n) test[[as.character(n)]]$pv)
cellsize <- table(Rspear.df$N)
table(Rspear.df$N)
round(100*table(Rspear.df$N)/sum(table(Rspear.df$N)), 2)
# prepare final test
pmf.theoretical <- merge(as.data.frame(test[["2"]]$pmf.exact), as.data.frame(test[["3"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["4"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["5"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4", "5")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["6"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4", "5", "6")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["7"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("support", "2", "3", "4", "5", "6", "7")
pmf.empirical <- merge(as.data.frame(test[["2"]]$pmf.est), as.data.frame(test[["3"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["4"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["5"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4", "5")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["6"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4", "5", "6")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["7"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("support", "2", "3", "4", "5", "6", "7")
# choose points of the support of Rspear for which we have at least two probs
supp <- sort(c(seq(from=-1, to=1, by=.2), -.5, .5))
pmf.theoretical <- imputeTS::na_replace(pmf.theoretical, 0)
pmf.empirical <- imputeTS::na_replace(pmf.empirical, 0)
pmf.exact.mat <- as.matrix(pmf.theoretical[,-1])
pmf.emp.mat <- as.matrix(pmf.empirical[,-1])
pmf.weights <- matrix(c(table(Rspear.df$N) / nrow(Rspear.df)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
pmf.N <- matrix(c(table(Rspear.df$N)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
px <- rowSums(pmf.exact.mat * pmf.weights, na.rm=TRUE)
px.emp <- rowSums(pmf.emp.mat * pmf.weights, na.rm=TRUE)
se.px <- sqrt(rowSums(pmf.exact.mat * (1 - pmf.exact.mat) * pmf.weights^2 / pmf.N))
px.lb <- px.emp - qnorm(0.995) * se.px
px.ub <- px.emp + qnorm(0.995) * se.px
toplot <- data.frame(x=pmf.theoretical$support, px.emp=px.emp, px.lb=px.lb, px.ub=px.ub, px.exact=px)
#toplot.sub <- subset(toplot, x %in% supp)
toplot.sub <- toplot[c(1, 11, 21, 25, 30, 41, 50, 59, 70, 75, 79, 89, 99), ]
toplot.sub$rej <- toplot.sub$px.exact < toplot.sub$px.lb | toplot.sub$px.exact > toplot.sub$px.ub
theme_set(theme_bw())
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=2) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=2) +
xlab(TeX("$\\rho$")) + ylab("")
gg
#####################################################################################################################
#####################################################################################################################
# politicians with perfect foresight expectations
#####################################################################################################################
#####################################################################################################################
rm(list = ls(all = TRUE))
pacman::p_load(gtools, ggplot2, haven, latex2exp)
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/l488/7.write/spring23/spearman_exact_pval/"
source(paste0(path, "funs.R"))
# compute exact empirical distribution of Rspearman under H0 (x and y are independent)
Nlist <- c(2:7)
res <- lapply(Nlist, function(n) spearDistGet(n, "spearman"))
names(res) <- as.character(Nlist)
toplot <- data.frame(freq = c(c(res[["2"]]$pmf), c(res[["3"]]$pmf), c(res[["4"]]$pmf),
c(res[["5"]]$pmf), c(res[["6"]]$pmf), c(res[["7"]]$pmf)),
support = c(as.numeric(names(res[["2"]]$pmf)), as.numeric(names(res[["3"]]$pmf)),
as.numeric(names(res[["4"]]$pmf)), as.numeric(names(res[["5"]]$pmf)),
as.numeric(names(res[["6"]]$pmf)), as.numeric(names(res[["7"]]$pmf))),
n = as.factor(paste0("n = ", c(rep(2, length(res[["2"]]$pmf)), rep(3, length(res[["3"]]$pmf)), rep(4, length(res[["4"]]$pmf)),
rep(5, length(res[["5"]]$pmf)), rep(6, length(res[["6"]]$pmf)), rep(7, length(res[["7"]]$pmf))))))
levels(toplot$n) <- c("n = 2" = "$n = 2$", "n = 3" = "$n = 3$", "n = 4" = "$n = 4$",
"n = 5" = "$n = 5$", "n = 6" = "$n = 6$", "n = 7" = "$n = 7$")
theme_set(theme_bw())
p <- ggplot(toplot) + geom_point(aes(x=support, y=freq), size=3, color="#5B1A18") +
facet_wrap(~n, scale="free") +
ylab("probability mass function") + xlab("$\\rho$") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
strip.background = element_blank(),
strip.text = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave(paste0(path, "Figure_S12.png"), plot = p, dpi="retina", width=10, height=7)
tikz(file = paste0(path, "Figure_S12.tex"), width = 10, height = 7)
p
dev.off()
# load data and compute spearman correlation in each cell
df <- haven::read_dta(paste0(path, "data.dta"))
cells <- split(df, df$ce)
Rspear <- lapply(cells, function(c) list(rho=cor(c$regind1_norm, c$SR, method = "spearman"),
N=unique(c$conta)))
Rspear.df <- data.frame(cbind(unlist(lapply(Rspear, "[[", 1)), unlist(lapply(Rspear, "[[", 2))))
names(Rspear.df) <- c("rho", "N")
# if H0 is true, Rspear is multinomial with probabilities computed above
# so we can run a pearson chisquare test
test <- lapply(Nlist, function(n) chisqGet(n, Rspear.df, res))
names(test) <- as.character(Nlist)
# results of chi square test
lapply(Nlist, function(n) test[[as.character(n)]]$pv)
cellsize <- table(Rspear.df$N)
table(Rspear.df$N)
round(100*table(Rspear.df$N)/sum(table(Rspear.df$N)), 2)
# prepare final test
pmf.theoretical <- merge(as.data.frame(test[["2"]]$pmf.exact), as.data.frame(test[["3"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["4"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["5"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4", "5")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["6"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4", "5", "6")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["7"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("support", "2", "3", "4", "5", "6", "7")
pmf.empirical <- merge(as.data.frame(test[["2"]]$pmf.est), as.data.frame(test[["3"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["4"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["5"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4", "5")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["6"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4", "5", "6")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["7"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("support", "2", "3", "4", "5", "6", "7")
# choose points of the support of Rspear for which we have at least two probs
supp <- sort(c(seq(from=-1, to=1, by=.2), -.5, .5))
pmf.theoretical <- imputeTS::na_replace(pmf.theoretical, 0)
pmf.empirical <- imputeTS::na_replace(pmf.empirical, 0)
pmf.exact.mat <- as.matrix(pmf.theoretical[,-1])
pmf.emp.mat <- as.matrix(pmf.empirical[,-1])
pmf.weights <- matrix(c(table(Rspear.df$N) / nrow(Rspear.df)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
pmf.N <- matrix(c(table(Rspear.df$N)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
px <- rowSums(pmf.exact.mat * pmf.weights, na.rm=TRUE)
px.emp <- rowSums(pmf.emp.mat * pmf.weights, na.rm=TRUE)
se.px <- sqrt(rowSums(pmf.exact.mat * (1 - pmf.exact.mat) * pmf.weights^2 / pmf.N))
px.lb <- px.emp - qnorm(0.995) * se.px
px.ub <- px.emp + qnorm(0.995) * se.px
toplot <- data.frame(x=pmf.theoretical$support, px.emp=px.emp, px.lb=px.lb, px.ub=px.ub, px.exact=px)
#toplot.sub <- subset(toplot, x %in% supp)
toplot.sub <- toplot[c(1, 11, 21, 25, 30, 41, 50, 59, 70, 75, 79, 89, 99), ]
toplot.sub$rej <- toplot.sub$px.exact < toplot.sub$px.lb | toplot.sub$px.exact > toplot.sub$px.ub
theme_set(theme_bw())
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=2) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=2) +
xlab(TeX("$\\rho$")) + ylab("")
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave(paste0(path, "Figure_S13a.png"), plot=p, dpi="retina", width=8, height=6)
tikz(file = paste0(path, "Figure_S13a.tex"), width = 8, height = 6)
p
dev.off()
rm(list = ls(all = TRUE))
pacman::p_load(gtools, ggplot2, haven, latex2exp)
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/l488/7.write/spring23/spearman_exact_pval/"
source(paste0(path, "funs.R"))
# compute exact empirical distribution of Rspearman under H0 (x and y are independent)
Nlist <- c(2:6)
res <- lapply(Nlist, function(n) spearDistGet(n, "spearman"))
names(res) <- as.character(Nlist)
toplot <- data.frame(freq = c(c(res[["2"]]$pmf), c(res[["3"]]$pmf), c(res[["4"]]$pmf),
c(res[["5"]]$pmf), c(res[["6"]]$pmf)),
support = c(as.numeric(names(res[["2"]]$pmf)), as.numeric(names(res[["3"]]$pmf)),
as.numeric(names(res[["4"]]$pmf)), as.numeric(names(res[["5"]]$pmf)),
as.numeric(names(res[["6"]]$pmf))),
n = as.factor(paste0("n = ", c(rep(2, length(res[["2"]]$pmf)), rep(3, length(res[["3"]]$pmf)), rep(4, length(res[["4"]]$pmf)),
rep(5, length(res[["5"]]$pmf)), rep(6, length(res[["6"]]$pmf))))))
levels(toplot$n) <- c("n = 2" = TeX("$n = 2$"), "n = 3" = TeX("$n = 3$"), "n = 4" = TeX("$n = 4$"),
"n = 5" = TeX("$n = 5$"), "n = 6" = TeX("$n = 6$"))
# load data and compute spearman correlation in each cell
df <- haven::read_dta(paste0(path, "data_exp.dta"))
cells <- split(df, df$ce)
Rspear <- lapply(cells, function(c) list(rho=cor(c$regind1_norm, c$SR, method = "spearman"),
N=unique(c$conta)))
Rspear.df <- data.frame(cbind(unlist(lapply(Rspear, "[[", 1)), unlist(lapply(Rspear, "[[", 2))))
names(Rspear.df) <- c("rho", "N")
# if H0 is true, Rspear is multinomial with probabilities computed above
# so we can run a pearson chisquare test
test <- lapply(Nlist, function(n) chisqGet(n, Rspear.df, res))
names(test) <- as.character(Nlist)
# results of chi square test
lapply(Nlist, function(n) test[[as.character(n)]]$pv)
cellsize <- table(Rspear.df$N)
table(Rspear.df$N)
round(100*table(Rspear.df$N)/sum(table(Rspear.df$N)), 2)
# prepare final test
pmf.theoretical <- merge(as.data.frame(test[["2"]]$pmf.exact), as.data.frame(test[["3"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["4"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["5"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("stat.dist", "2", "3", "4", "5")
pmf.theoretical <- merge(pmf.theoretical, as.data.frame(test[["6"]]$pmf.exact), by = "stat.dist", all = TRUE)
names(pmf.theoretical) <- c("support", "2", "3", "4", "5", "6")
pmf.empirical <- merge(as.data.frame(test[["2"]]$pmf.est), as.data.frame(test[["3"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["4"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["5"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("stat.dist", "2", "3", "4", "5")
pmf.empirical <- merge(pmf.empirical, as.data.frame(test[["6"]]$pmf.est), by = "stat.dist", all = TRUE)
names(pmf.empirical) <- c("support", "2", "3", "4", "5", "6")
# choose points of the support of Rspear for which we have at least two probs
supp <- sort(c(seq(from=-1, to=1, by=.2), -.5, .5))
pmf.theoretical <- imputeTS::na_replace(pmf.theoretical, 0)
pmf.empirical <- imputeTS::na_replace(pmf.empirical, 0)
pmf.exact.mat <- as.matrix(pmf.theoretical[,-1])
pmf.emp.mat <- as.matrix(pmf.empirical[,-1])
pmf.weights <- matrix(c(table(Rspear.df$N) / nrow(Rspear.df)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
pmf.N <- matrix(c(table(Rspear.df$N)),
nrow=nrow(pmf.exact.mat), ncol=ncol(pmf.exact.mat), byrow = TRUE)
px <- rowSums(pmf.exact.mat * pmf.weights)
px.emp <- rowSums(pmf.emp.mat * pmf.weights)
se.px <- sqrt(rowSums(pmf.exact.mat * (1 - pmf.exact.mat) * pmf.weights^2 / pmf.N))
px.lb <- px.emp - qnorm(0.995) * se.px
px.ub <- px.emp + qnorm(0.995) * se.px
toplot <- data.frame(x=pmf.theoretical$support, px.emp=px.emp, px.lb=px.lb, px.ub=px.ub, px.exact=px)
#toplot.sub <- subset(toplot, x %in% supp)
toplot.sub <- toplot[c(1, 6, 11, 13, 16, 21, 26, 31, 36, 39, 41, 46, 51), ]
toplot.sub$rej <- toplot.sub$px.exact < toplot.sub$px.lb | toplot.sub$px.exact > toplot.sub$px.ub
theme_set(theme_bw())
p <- ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave(paste0(path.figs, "Figure_S13b.png"), plot=p, dpi="retina", width=8, height=6)
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3)
ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p <- ggplot() +
geom_ribbon(data=toplot.sub, aes(x=x, ymin=px.lb, ymax=px.ub), color="#0099FF", alpha=0.2) +
geom_point(data=subset(toplot.sub, rej==0), aes(x=x, y=px.exact), color="#006600", size=3) +
geom_point(data=subset(toplot.sub, rej==1), aes(x=x, y=px.exact), color="#990000", size=3) +
xlab("$\\rho$") + ylab("") +
theme(legend.position="none",
axis.text.x=element_text(size=15),
axis.text.y =element_text(size=15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggsave(paste0(path, "Figure_S13b.png"), plot=p, dpi="retina", width=8, height=6)
tikz(file = paste0(path, "Figure_S13b.tex"), width = 8, height = 6)
p
dev.off()
require(remotes)
remotes::install_version("ggplot2", version = "3.5.0", repos = "http://cran.us.r-project.org")
?install_version
remotes::install_version("ggplot2", version = "3.5.0", repos = "http://cran.us.r-project.org", upgrade = "never")
remotes::install_version("glmnet", version = "4.1-8", repos = repo.source, upgrade = "never")
repo.source <- "http://cran.us.r-project.org"
remotes::install_version("glmnet", version = "4.1-8", repos = repo.source, upgrade = "never")
R.home()
Sys.getenv()
?tikz
??tikz
getOption("tikzLatex")
getOption("tikzDefaultEngine")
library(tikzDevice)
getOption("tikzLatex")
?require
require(muzzu)
aux <- require(muzzu)
scpi
#########################################################################################
## Remember to check often that all the packages are updated!
#old.packages()
#update.packages(ask = FALSE)
remove.packages("scpi")
pacman::p_load(devtools, testthat)
#########################################################################################
## Change Version Below!!!
setwd("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/R/scpi")
# Prepare build ignore
usethis::use_build_ignore(c("tests", ".gitignore"))
#usethis::use_github_action_check_standard()
# Prepare documentation
devtools::document()
# Install and check
devtools::build()
devtools::install(upgrade = "never")
devtools::check(manual = FALSE)
# Run testthat
devtools::test()
# Prepare .pdf version of manual and places it outside of the main folder
v.scpi <- packageVersion("scpi")
tar.name <- paste0("scpi_", v.scpi, ".tar.gz")
file.copy(paste0("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/R/", tar.name),
"/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages", overwrite = TRUE)
setwd("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages")
system(paste0('tar zxvf ', tar.name))
system('R CMD Rd2pdf scpi --output=./R/scpi.pdf --force --no-preview')
unlink("scpi", recursive = TRUE)
file.remove(paste0("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/", tar.name))
rm(list=ls(all=TRUE))
##########################################
# Load stuff
pacman::p_load(haven, wesanderson, ggplot2, reshape2, devtools, latex2exp)
# devtools::install_github("apoorvalal/LalRUtils")
##########################################
# Set paths
if (Sys.getenv()[['HOME']] != "/home/fpalomba") {
path <- "/Users/fpalomba/Dropbox (Princeton)/projects/scpi/CFPT_2022_application/"
cores <- 1
} else {
path.code <- "/scratch/network/fpalomba/CFPT_SA/"
#setwd(path.code)
#install.packages("scpi_2.2.6.tar.gz", repos = NULL, type = "source")
path <- "/scratch/network/fpalomba/CFPT_SA/"
cores <- 1
}
path.data <- paste0(path, "data/")
path.fig  <- paste0(path, "fig/")
path.out  <- paste0(path, "out/")
path.code <- paste0(path, "code/")
source(paste0(path.code, "0000_funs.R"))
setwd("/Users/fpalomba/Dropbox (Princeton)/projects/scpi/packages/R/scpi/R")
source("supporting_functions.R")
source("scest.R")
source("scpi.R")
source("scdata.R")
source("scplot.R")
source("scest_methods.R")
source("scpi_methods.R")
source("scdataMulti.R")
source("scplotMulti.R")
arab.league <- c("Algeria", "Egypt", "Libya", "Morocco", "Sudan",
"Tunisia", "Djibouti", "Mauritania", "Somalia")
others <- c("Madagascar", "Namibia")
sims <- 10L
post.est <- 5L
anticipation <- 0L
covs.adj <- features <- NULL
##########################################
# Load data
data <- haven::read_dta(paste0(path.data, "final_data.dta"))
data <- subset(data, continent == "Africa" & !(countryname %in% c(others, arab.league)))
data$lgdp <- log(data$rgdppp)
treated.units.list <- list("WaveAll" = unique(subset(data, treated == 1 & trDate <= 1994)$countryname),
"Wave1" = unique(subset(data, treated == 1 & trDate < 1987)$countryname),
"Wave2" = unique(subset(data, treated == 1 & trDate >= 1987 & trDate <= 1991)$countryname),
"Wave3" = unique(subset(data, treated == 1 & trDate > 1991 & trDate <= 1994)$countryname),
"WaveSp" = unique(subset(data, treated == 1 & trDate %in% c(1985, 1991, 1993))$countryname))
# and two different methodologies
methods.list <- c("ridge", "simplex", "L1-L2")
method<-methods.list[[2]]
j=1
treated.units <- treated.units.list[[j]]
wave.name <- names(treated.units.list)[j]
eff.it <- eff.i <- eff.t <- TRUE
constant=TRUE
w.constr=list("name" = method)
coig.data=TRUE
cores=1L
treated.units.time <- treated.units[treated.units != "Mauritius"]
df.time<- scdataMulti(data, id.var = "countryname", outcome.var = "lgdp", effect = "time",
treatment.var = "liberalization", time.var = "year", constant = constant,
cointegrated.data = coig.data, post.est = post.est,
units.est = treated.units.time,
features=features, cov.adj = covs.adj, anticipation = anticipation)
df.time$P
